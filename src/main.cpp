/*
 * Copyright (C) 2019 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * GNU Lesser General Public License v2.1 or any later version.
 */

#include "RosPubSubExample.h"

#include <chrono>
#include <cstdlib>
#include <iostream>
#include <string>
#include <thread>
#include <vector>

int main(int /*argc*/, char* /*argv*/[])
{
    // Allocate the autogenerated class
    RosPubSubExampleModelClass model;

    // If this reference is not nullptr it means that
    // errors occurred
    const char_T*& errorMsg = model.getRTM()->errorStatus;

    // ==============
    // INITIALIZATION
    // ==============

    // Initialize the model
    model.initialize();

    // Stop the execution if initialize() failed
    if (errorMsg) {
        std::cout << errorMsg;
        return EXIT_FAILURE;
    }

    // ===============
    // SIMULATION LOOP
    // ===============

    // Set the simulation step
    auto period = std::chrono::milliseconds(10);

    // This simple example executes a simulation without any input / output.
    // While simulating, you can verify that the message is published using
    // "rostopic echo".
    // For an example on how to set inputs and read outputs, refer to:
    // https://robotology.github.io/blockfactory/mkdocs/autogenerate_code/

    for (unsigned i = 0; i < 1000; ++i) {
        // Simulate one step
        auto tick = std::chrono::system_clock::now();
        model.step();
        auto tock = std::chrono::high_resolution_clock::now();

        auto elapsed = tock - tick;
        if (elapsed < period) {
            std::this_thread::sleep_for(period - elapsed);
        }

        // Stop the execution if step() failed
        if (errorMsg) {
            std::cout << errorMsg;
            break;
        }
    }

    // =========
    // TERMINATE
    // =========

    // Terminate the model
    model.terminate();

    // Get the error messages
    if (errorMsg) {
        std::cout << errorMsg;
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}
